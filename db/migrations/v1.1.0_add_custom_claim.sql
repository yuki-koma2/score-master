-- Custom types
create type public.app_permission as enum ('channels.delete', 'messages.delete');
create type public.app_role as enum ('admin', 'moderator');

-- USER ROLES
create table public.user_roles
(
    id      bigint generated by default as identity primary key,
    user_id uuid references auth.users on delete cascade not null,
    role    app_role                                     not null,
    unique (user_id, role)
);
comment
on table public.user_roles is 'Application roles for each user.';

-- ROLE PERMISSIONS
create table public.role_permissions
(
    id         bigint generated by default as identity primary key,
    role       app_role       not null,
    permission app_permission not null,
    unique (role, permission)
);
comment
on table public.role_permissions is 'Application permissions for each role.';

insert into public.role_permissions (role, permission)
values ('admin', 'channels.delete'),
       ('admin', 'messages.delete'),
       ('moderator', 'messages.delete');

-- Create the auth hook function
create or replace function public.custom_access_token_hook(event jsonb)
returns jsonb
language plpgsql
stable
as $$
  declare
claims jsonb;
    user_role public.app_role;
begin
    -- Fetch the user role in the user_roles table
select role into user_role from public.user_roles where user_id = (event->>'user_id')::uuid;

claims := event->'claims';

    if user_role is not null then
      -- Set the claim
      claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
else
      claims := jsonb_set(claims, '{user_role}', 'null');
end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    -- Return the modified or original event
return event;
end;
$$;

grant usage on schema public to supabase_auth_admin;

grant execute
    on function public.custom_access_token_hook
    to supabase_auth_admin;

revoke execute
    on function public.custom_access_token_hook
    from authenticated, anon, public;

grant all
on table public.user_roles
to supabase_auth_admin;

revoke all
    on table public.user_roles
    from authenticated, anon, public;

create policy "Allow auth admin to read user roles" ON public.user_roles
as permissive for select
                             to supabase_auth_admin
                             using (true)
